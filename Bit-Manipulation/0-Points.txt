1. Change number to binary number.
    1. If the number is divisible by 2 add '0' otherwise add '1'.
    2. Repeat step 1 until number is '1'.

2. Negative Inverse of any number is 2's complement.

3. When a number is right shifted one time, it means the number is divided by 2.
    int a = 4;
    int b = a >> 1; // b = 2

4. When a number is left shifted one time, it means the number is multiplied by 2.
    int a = 2;
    int b = a << 1; // b = 4

5. If number is even then number & 1 = 0.

6. Finding the ith bit of a number.
    1. Left shift '1' i times and store it in a variable (mask). 
    2. number & mask == 1 then ith bit is 1.
    3. number & mask == 0 then ith bit is 0.

7. Set ith bit of a number to '1'.
    1. Left shift 'i' i times (mask).
    2. number = number | mask.

8. Clear bit or change the ith bit to '0'.
    1. Left shift '1' i times (mask).
    2. Invert the mask (~mask).
    3. number = number & mask.

9. Count the number of set bits.
    1. n = n & (n-1) until the n is zero.

10. 0 ^ number = number
    number ^ number = 0